추상화 
오버라이딩: 추상메서드만 모아놓은것 , 부모의 메서드만 불러서 완성시키는것?
오버로딩: 메서드 명이 같은 것 / 자바에서는 오버로딩 가능
캡슐화: 메서드를 만들어서 그 메서드를 통해 접근
상속: 부모클래스에서 자식클래스가 상속을 받는 경우
static이 붙지 않으면 다 인스턴스 변수
생성자: 생성만을 목적으로 탄생한 메서드의 일종
인터페이스: 미완의 메서드들만 모아놓은 것
필요한 사람이 미완의 메서드를 오버라이딩해서 씀
implements는 다중구현 가능하다
다형성을 하는 목적: 변수가 하나 필요하기때문
내부클래스는 메서드처럼 용도 씀
추상메서드 쓰는 이유? 메서드를 오버라이딩 하기 위해서



라이브러리: 자바의 매서드들만 모아놓은것


void > 보내주지 않겠다 >>메서드가 값을 반환하지 않음
return값이 나오지 않음 


new로 생성하면 앞에 static이 붙지 않은 instance 는 주소가 다름
static은 공유하는 것

reference는 주소값
자기 자신의 reference => this

instance변수는 각각의 주소값을 가지고 있음 

static은 각각의 주소값이 없는것
따라서 static은 this를 쓰지못함

더 오픈됨
public        private

class는 가급적 오픈

public static void method

class들끼리 소통이 자유자재로 되는 것 > 객체지향(?)

클래스

제일 먼저 필요로 하는 설계도면과 같다
클래스로 완성한 것을 객체라 한다


class안에서 쓰는 변수 > 전역변수

생성자: 클래스를 생성할 수 있게 해주는 것

추상메서드: 선언만 해놓고 몸통{}(구현부)이 없는것?


public: 모든접근을 허용 >protected: 같은 패키지(폴더)에 있는 객체와 상속관계의 객체들만 허용>default>private

instance 변수 (개인이 소유하고 있는 물컵)

static 변수 (약수터에 있는 물바가지)

변수를 디폴트로 줄 일은 거의 없음

디폴트 생성자 > 인자값(파라메타)값이 없는 생성자

상수는 모두 대문자


ExObject_01 sg=new ExObject_01();
	
	sg.name="성경";
				System.out.println(sg.name);
	}

여기서 sg > 참조변수

git 사용하는 이유
git 하나의 프로젝트에 각각 작업물을 올림
공동db를 사용할때 다른 회원들이 실시간으로 보는게 가능

클라우드에 저장
만든 웹사이트를 저장해서 올려서 같이 보고싶을때 클라우드 저장소에 저장

클래스 (has)



상속 (is)

공통된 것만 부모클래스에서 수여받는 것?


C >다중상속 가능
java > 하나밖에 상속받지 못함

프레임워크: 수많은 라이브러리를 모아놓은 것

메서드 안에는 하나의 메서드만 담음?
swing : 또 하나의 윈도우창 